{"version":3,"sources":["App/components/Commune/CommuneList.js"],"names":["useStyles","makeStyles","theme","rootForProg","display","marginLeft","spacing","justifyContent","paper","marginTop","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","initialValues","communeName","schema","yup","shape","required","AlertSnack","props","elevation","variant","CommuneList","classes","t","useTranslation","useState","checked","setChecked","open","setOpen","useForm","defaultValues","mode","resolver","yupResolver","register","handleSubmit","setValue","reset","errors","dispatch","useDispatch","useSelector","state","communes","commune","loading","error","dg","useRef","d","openDialog","setOpenDialog","handleDialogClose","current","fields","Object","keys","handleClose","event","reason","useEffect","instance","deselectAll","fetchCommunes","setTimeout","customizeText","useCallback","e","value","onClose","id","onClick","color","deleteCommune","then","unwrapResult","Header","style","Title","as","title","size","clearFilter","Body","in","severity","autoHideDuration","anchorOrigin","vertical","horizontal","xs","md","className","component","noValidate","onSubmit","data","updCommune","updateCommune","addCommune","createCommune","Row","Group","Col","container","item","onChange","test","target","inputRef","InputLabelProps","shrink","fullWidth","autoFocus","label","name","helperText","message","type","button","startIcon","ref","dataSource","keyExpr","focusedRowEnabled","defaultSelectedRowKeys","onSelectionChanged","selectedRowsData","forEach","field","shouldValidate","shouldDirty","allowColumnReordering","showRowLines","wordWrapEnabled","columnHidingEnabled","columnAutoWidth","enabled","visible","placeholder","defaultPageSize","showPageSizeSelector","showNavigationButtons","allowedPageSizes","showInfo","dataField","caption","des","row","allowUpdating","allowDeleting","allowAdding","summaryType","column"],"mappings":"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","file":"static/js/16.293c8ec1.chunk.js","sourcesContent":["import React, {useEffect, useState, useRef, useCallback} from \"react\";\r\nimport Aux from \"../../../hoc/_Aux\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Card, Col, Form, Row} from \"react-bootstrap\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport FindReplaceIcon from \"@material-ui/icons/FindReplace\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DataGrid, {\r\n    Column, ColumnChooser,\r\n    GroupItem,\r\n    LoadPanel,\r\n    SearchPanel, Selection,\r\n    Sorting, Summary, TotalItem, Button, Paging, Pager, Editing\r\n} from \"devextreme-react/data-grid\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {addCommune, deleteCommune, fetchCommunes, updCommune} from \"./CommuneSlice\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Buttonn from '@material-ui/core/Button';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport {yupResolver} from \"@hookform/resolvers/yup\";\r\nimport * as yup from \"yup\";\r\nimport {unwrapResult} from \"@reduxjs/toolkit\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport {Alert, AlertTitle} from \"@material-ui/lab\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {useTranslation} from \"react-i18next\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    rootForProg: {\r\n        display: 'flex',\r\n        '& > * + *': {\r\n            marginLeft: theme.spacing(2),\r\n        },\r\n        justifyContent: 'center'\r\n    },\r\n    paper: {\r\n        marginTop: theme.spacing(2),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst initialValues = {\r\n    communeName: \"\",\r\n}\r\n\r\nconst schema = yup.object().shape({\r\n    communeName: yup.string().required('required')\r\n});\r\n\r\nfunction AlertSnack(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst CommuneList = () => {\r\n    const classes = useStyles();\r\n    const {t} = useTranslation()\r\n    const [checked, setChecked] = useState(false);\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const {register, handleSubmit, setValue, reset, errors} = useForm({\r\n        defaultValues: initialValues,\r\n        mode: 'onChange',\r\n        resolver: yupResolver(schema)\r\n    })\r\n    const dispatch = useDispatch()\r\n    const {communes, loading, error} = useSelector(state => ({\r\n        communes: state.commune.communes,\r\n        loading: state.commune.loading,\r\n        error: state.commune.error,\r\n    }))\r\n\r\n    const dg = useRef(null)\r\n    const d = useRef(null)\r\n    const clearF = () => {\r\n        dg.current.instance.clearFilter();\r\n    }\r\n\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const handleDialogClickOpen = (des) => {\r\n        d.current = des.row.data\r\n        setOpenDialog(() => true);\r\n    };\r\n\r\n    const handleDialogClose = () => {\r\n        setOpenDialog(() => false);\r\n        reset(initialValues)\r\n        d.current = null\r\n    };\r\n\r\n    const delCommune = () => {\r\n        dispatch(deleteCommune(d.current.id)).then(unwrapResult)\r\n        d.current = null\r\n        setOpenDialog(() => false)\r\n    }\r\n\r\n    const createCommune = (data) => {\r\n        dispatch(addCommune(data)).then(unwrapResult).then(setOpen(() => true))\r\n        d.current = null\r\n\r\n    }\r\n    const updateCommune = (data) => {\r\n        data.id = d.current.id\r\n        dispatch(updCommune(data)).then(unwrapResult).then(setOpen(() => true))\r\n        d.current = null\r\n    }\r\n    const submitForm = (data) => {\r\n        return d.current\r\n            ? updateCommune(data)\r\n            : createCommune(data);\r\n    }\r\n\r\n    const fields = Object.keys(initialValues)\r\n    const selectCommune = ({selectedRowsData}) => {\r\n        d.current = selectedRowsData[0]\r\n        d.current && fields.forEach(field => setValue(field, d.current[field], {\r\n            shouldValidate: true,\r\n            shouldDirty: true\r\n        }));\r\n    }\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setOpen(() => false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (d.current == null) {\r\n            reset(initialValues)\r\n            dg.current.instance.deselectAll()\r\n        }\r\n    }, [d, reset])\r\n    useEffect(() => {\r\n        dispatch(fetchCommunes())\r\n        if (error) {\r\n            setChecked(true)\r\n            setTimeout(() => {\r\n                setChecked(false)\r\n            }, 5000)\r\n        }\r\n    }, [dispatch, error, reset])\r\n\r\n    const customizeText = useCallback((e) => {\r\n        return t('count') + \": \" + e.value;\r\n    }, [t]);\r\n\r\n    return (\r\n        <Aux>\r\n            <Dialog open={openDialog} onClose={handleDialogClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">{t('delete')}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        {t('ask_delete')}\r\n                    </DialogContentText>\r\n                    {/*<TextField*/}\r\n                    {/*    autoFocus*/}\r\n                    {/*    margin=\"dense\"*/}\r\n                    {/*    id=\"name\"*/}\r\n                    {/*    label=\"Email Address\"*/}\r\n                    {/*    type=\"email\"*/}\r\n                    {/*    fullWidth*/}\r\n                    {/*/>*/}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Buttonn onClick={handleDialogClose} color=\"primary\">\r\n                        {t('cancel')}\r\n                    </Buttonn>\r\n                    <Buttonn onClick={(e) => delCommune(e)} color=\"primary\">\r\n                        {t('delete')}\r\n                    </Buttonn>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n            <Row>\r\n                <Col>\r\n                    <Card>\r\n                        <Card.Header style={{display: 'flex', justifyContent: 'space-between'}}>\r\n                            <Card.Title as=\"h5\">{t('communes')}</Card.Title>\r\n                            <Tooltip title={t('reset_filters')}>\r\n                                <Fab size={\"small\"} color=\"primary\" aria-label=\"clear all filters\"\r\n                                     onClick={() => clearF()}>\r\n                                    <FindReplaceIcon/>\r\n                                </Fab>\r\n                            </Tooltip>\r\n                        </Card.Header>\r\n                        <Card.Body>\r\n                            <Collapse in={checked}><Alert variant=\"filled\"\r\n                                                          severity=\"error\"><AlertTitle>Error</AlertTitle>There is an\r\n                                error — <strong>{error}</strong></Alert></Collapse>\r\n                            <Snackbar open={open} autoHideDuration={4000}\r\n                                      anchorOrigin={{vertical: 'top', horizontal: 'right'}} onClose={handleClose}>\r\n                                <AlertSnack onClose={handleClose}\r\n                                            severity=\"success\">{t('saved_successfuly')}</AlertSnack></Snackbar>\r\n                            <Row>\r\n                                <Col xs={12} md={4}>\r\n                                    <div className={classes.paper}>\r\n                                        <Avatar className={classes.avatar}>\r\n                                            <PostAddIcon/>\r\n                                        </Avatar>\r\n                                        <Typography component=\"h1\" variant=\"h5\">\r\n                                            {d.current ? t('edit') : t('add')} {t('commune')}\r\n                                        </Typography>\r\n                                        {loading ? <CircularProgress/> : <form className={classes.form} noValidate\r\n                                                                               onSubmit={handleSubmit(submitForm)}>\r\n                                            <Form.Row>\r\n                                                <Form.Group as={Col} xs={12}>\r\n                                                    <Grid container spacing={2}>\r\n                                                        <Grid item xs={12}>\r\n                                                            <TextField\r\n                                                                onChange={(e) => /^[\\u0600-\\u065F\\u066A-\\u06EF\\u06FA-\\u06FFa-zA-Z]+[\\u0600-\\u065F\\u066A-\\u06EF\\u06FA-\\u06FFa-zA-Z-_]*$/.test(e.target.value) ? e.target.value : e.target.value = \"\"}\r\n                                                                variant=\"outlined\"\r\n                                                                margin=\"normal\"\r\n                                                                inputRef={register}\r\n                                                                InputLabelProps={d.current && {shrink: true}}\r\n                                                                fullWidth\r\n                                                                autoFocus\r\n                                                                label={t('commune')}\r\n                                                                name=\"communeName\"\r\n                                                                error={!!errors.communeName}\r\n                                                                helperText={t(errors.communeName?.message)}\r\n                                                            />\r\n                                                        </Grid>\r\n                                                    </Grid>\r\n                                                </Form.Group>\r\n                                            </Form.Row>\r\n\r\n                                            <Grid container spacing={2} >\r\n                                                <Grid item xs={12}>\r\n                                                    <Buttonn\r\n                                                        type=\"submit\"\r\n                                                        variant=\"contained\"\r\n                                                        color=\"primary\"\r\n                                                        fullWidth\r\n                                                        size=\"large\"\r\n                                                        className={classes.button}\r\n                                                        startIcon={<SaveIcon/>}\r\n                                                    >\r\n                                                        {t('save')}\r\n                                                    </Buttonn>\r\n                                                    {/*<Buttonn*/}\r\n                                                    {/*    variant=\"contained\"*/}\r\n                                                    {/*    color=\"primary\"*/}\r\n                                                    {/*    fullWidth*/}\r\n                                                    {/*    size=\"large\"*/}\r\n                                                    {/*    className={classes.button}*/}\r\n                                                    {/*    onClick={()=>reset(initialValues)}*/}\r\n                                                    {/*>*/}\r\n                                                    {/*    reset*/}\r\n                                                    {/*</Buttonn>*/}\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </form>}\r\n\r\n                                    </div>\r\n                                </Col>\r\n                                <Col xs={12} md={8} className={classes.rootForProg}>\r\n                                    {/*{loading && <CircularProgress/>}*/}\r\n                                    <Paper>\r\n                                        <DataGrid id=\"dataGrid\" ref={dg}\r\n                                                  dataSource={communes}\r\n                                                  keyExpr=\"id\"\r\n                                                  focusedRowEnabled={true}\r\n                                                  defaultSelectedRowKeys={null}\r\n                                                  onSelectionChanged={selectCommune}\r\n                                                  allowColumnReordering={true}\r\n                                                  showRowLines={true}\r\n                                                  wordWrapEnabled={true}\r\n                                                  columnHidingEnabled={true}\r\n                                                  columnAutoWidth={true}>\r\n                                            <Sorting mode=\"multiple\"/>\r\n                                            {/*<Scrolling mode=\"virtual\"/>*/}\r\n                                            <LoadPanel enabled={loading}/>\r\n                                            <SearchPanel visible={true} width={250} placeholder={t('search')}/>\r\n                                            <Paging defaultPageSize={10}/>\r\n                                            <Pager showPageSizeSelector={true}\r\n                                                   showNavigationButtons={true}\r\n                                                   allowedPageSizes={[5, 15, 20, 100]}\r\n                                                   showInfo={true}/>\r\n                                            <Column dataField=\"communeName\" caption={t('commune')}/>\r\n                                            <Column type=\"buttons\">\r\n                                                <Button name=\"delete\" onClick={(e) => handleDialogClickOpen(e)}/>\r\n                                            </Column>\r\n                                            <ColumnChooser enabled={true} mode=\"select\" title={t('Column_chooser')}/>\r\n                                            <Selection mode=\"single\"/>\r\n                                            <Editing\r\n                                                allowUpdating={false}\r\n                                                allowDeleting={true}\r\n                                                allowAdding={false}\r\n                                            />\r\n                                            <Summary>\r\n                                                <GroupItem summaryType=\"count\">\r\n                                                </GroupItem>\r\n                                                <TotalItem\r\n                                                    column=\"communeName\"\r\n                                                    summaryType=\"count\" customizeText={customizeText}/>\r\n                                            </Summary>\r\n\r\n                                        </DataGrid>\r\n                                    </Paper>\r\n\r\n                                </Col>\r\n                            </Row>\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Aux>\r\n    );\r\n};\r\nexport default CommuneList\r\n"],"sourceRoot":""}